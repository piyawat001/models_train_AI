
# สรุปการเพิ่มไฟล์สำหรับการทดสอบและการทำนาย

ผมได้สร้างไฟล์เพิ่มเติมเพื่อให้การใช้งานและทดสอบโมเดลเป็นไปได้อย่างสะดวกมากขึ้น ดังนี้:

1. **ไฟล์สำหรับการทดสอบโมเดล**:
   - `test_models.py` - ไฟล์ Python สำหรับการทดสอบโมเดลกับชุดข้อมูลทดสอบ
   - `test.sh` - สคริปต์ shell สำหรับเรียกใช้ `test_models.py` อย่างง่าย

2. **ไฟล์สำหรับการทำนายภาพใหม่**:
   - `predict_image.py` - ไฟล์ Python สำหรับการทำนายภาพใหม่ด้วยโมเดลที่เทรนแล้ว (รองรับทั้งภาพเดี่ยวและทั้งโฟลเดอร์)
   - `predict.sh` - สคริปต์ shell สำหรับเรียกใช้ `predict_image.py` อย่างง่าย

3. **สคริปต์สำหรับการฝึกอบรม**:
   - `train.sh` - สคริปต์ shell สำหรับเรียกใช้การฝึกอบรมโมเดลอย่างง่าย

## คุณสมบัติของ test_models.py

- **การทดสอบโมเดลที่หลากหลาย** - สามารถทดสอบได้ทั้ง EfficientNetV2, InceptionV3, VGG16, RegNet และ ResNet50
- **การประเมินโมเดล** - ประเมินความแม่นยำ, สร้าง confusion matrix และรายงานการจำแนกประเภท
- **การบันทึกผลลัพธ์** - บันทึกผลการทำนายเป็นไฟล์ Excel พร้อมความน่าจะเป็นของแต่ละคลาส

## คุณสมบัติของ predict_image.py

- **การทำนายภาพเดี่ยว** - ทำนายคลาสของภาพใหม่และแสดงความน่าจะเป็นของแต่ละคลาส
- **การทำนายทั้งโฟลเดอร์** - ทำนายทุกภาพในโฟลเดอร์และสร้างรายงานสรุป
- **การทำ Ensemble** - รวมผลการทำนายจากหลายโมเดลเพื่อเพิ่มความแม่นยำ
- **การแสดงผลเป็นภาพ** - สร้างภาพกราฟแสดงผลการทำนายที่เข้าใจง่าย
- **การบันทึกผลลัพธ์** - บันทึกผลการทำนายเป็นไฟล์ Excel และภาพ

## วิธีการใช้งาน

### ทดสอบโมเดล

```bash
# ทดสอบทุกโมเดล
./test.sh --all

# ทดสอบเฉพาะโมเดล EfficientNetV2
./test.sh --efficientnetv2

# ทดสอบโมเดลที่ระบุพาธเอง
./test.sh --efficientnetv2 --model_path efficientnet_outputs/best_model.pth
```

### ทำนายภาพใหม่

```bash
# ทำนายภาพเดี่ยวด้วยโมเดล EfficientNetV2
./predict.sh path/to/image.jpg --efficientnetv2

# ทำนายทุกภาพในโฟลเดอร์ด้วยโมเดล ResNet50
./predict.sh path/to/folder --resnet50

# ทำนายด้วย Ensemble (รวมหลายโมเดล)
./predict.sh path/to/image.jpg --ensemble
```

### ฝึกอบรมโมเดล

```bash
# ฝึกอบรมทุกโมเดล
./train.sh --all

# ฝึกอบรมเฉพาะโมเดล VGG16
./train.sh --vgg16
```

ทั้งหมดนี้ช่วยให้งานจำแนกประเภทภาพรังสีกรามของคุณสามารถทำได้สะดวกยิ่งขึ้น ตั้งแต่การฝึกอบรมโมเดล การทดสอบประสิทธิภาพ ไปจนถึงการนำไปใช้ทำนายภาพใหม่ ทั้งในรูปแบบไฟล์เดี่ยวหรือหลายไฟล์ในโฟลเดอร์


# ความแตกต่างของไฟล์โมเดลและการเลือกใช้สำหรับการทำนาย

ในระหว่างการเทรนและ fine-tuning โมเดล จะมีการบันทึกไฟล์โมเดลหลายรูปแบบ ซึ่งแต่ละไฟล์มีความแตกต่างกันในเรื่องของเกณฑ์ที่ใช้ในการบันทึกและขั้นตอนของการเทรน ดังนี้:

## ความแตกต่างของไฟล์โมเดล

### 1. best_model_acc.pth
- **เกณฑ์การบันทึก**: บันทึกเมื่อโมเดลมีค่าความแม่นยำ (accuracy) บนชุดข้อมูลตรวจสอบ (validation) ดีที่สุด
- **ขั้นตอน**: ได้จากการเทรนปกติในขั้นแรก (ก่อน fine-tuning)
- **ลักษณะ**: เป็นโมเดลที่ให้ความสำคัญกับการทำนายถูกต้องมากที่สุด

### 2. best_model_loss.pth
- **เกณฑ์การบันทึก**: บันทึกเมื่อโมเดลมีค่าความสูญเสีย (loss) บนชุดข้อมูลตรวจสอบต่ำที่สุด
- **ขั้นตอน**: ได้จากการเทรนปกติในขั้นแรก (ก่อน fine-tuning)
- **ลักษณะ**: เป็นโมเดลที่เน้นการลดความผิดพลาดโดยรวม อาจให้ความมั่นใจในการทำนายดีกว่า

### 3. fine_tuned_model_acc.pth
- **เกณฑ์การบันทึก**: บันทึกเมื่อโมเดลมีค่าความแม่นยำหลัง fine-tuning ดีที่สุด
- **ขั้นตอน**: ได้จากการ fine-tuning (ขั้นที่สอง) ซึ่งปรับโมเดลให้เข้ากับข้อมูลเฉพาะทางมากขึ้น
- **ลักษณะ**: มักมีประสิทธิภาพดีกว่าโมเดลปกติ เพราะมีการปรับแต่งหลายชั้นของโมเดล

### 4. fine_tuned_model_loss.pth
- **เกณฑ์การบันทึก**: บันทึกเมื่อโมเดลมีค่าความสูญเสียหลัง fine-tuning ต่ำที่สุด
- **ขั้นตอน**: ได้จากการ fine-tuning เช่นเดียวกับไฟล์ fine_tuned_model_acc.pth
- **ลักษณะ**: อาจให้การแจกแจงความน่าจะเป็นที่สมดุลกว่า

## ไฟล์ใดที่ควรใช้สำหรับการทำนาย?

โดยทั่วไปแล้ว **fine_tuned_model_acc.pth** มักเป็นไฟล์ที่เหมาะสมที่สุดสำหรับการทำนาย เนื่องจาก:

1. **ผ่านการ fine-tuning มาแล้ว** - โมเดลได้รับการปรับแต่งให้เข้ากับข้อมูลเฉพาะทางมากขึ้น
2. **ให้ความแม่นยำสูงสุด** - ถูกเลือกโดยใช้เกณฑ์ความแม่นยำซึ่งตรงกับเป้าหมายของการจำแนกประเภท
3. **ประสิทธิภาพโดยรวมดีกว่า** - การ fine-tuning ช่วยให้โมเดลเรียนรู้ลักษณะเฉพาะของข้อมูลได้ดีขึ้น

อย่างไรก็ตาม ในบางกรณี คุณอาจพิจารณาใช้ไฟล์อื่นๆ:

- **fine_tuned_model_loss.pth** - หากต้องการโมเดลที่ให้การแจกแจงความน่าจะเป็นที่น่าเชื่อถือกว่า (calibration ดีกว่า)
- **best_model_acc.pth** - หากต้องการโมเดลที่เรียนรู้เฉพาะชั้นสุดท้าย ซึ่งอาจป้องกันการ overfitting ในกรณีที่มีข้อมูลน้อย

## การใช้งานกับ predict_image.py

เมื่อใช้งาน `predict_image.py` คุณสามารถเลือกใช้ไฟล์โมเดลที่ต้องการได้ดังนี้:

```bash
# ใช้ไฟล์ fine_tuned_model_acc.pth (แนะนำ)
python predict_image.py --model efficientnetv2 --model_path efficientnet_outputs/fine_tuned_model_acc.pth --input your_image.jpg

# หรือใช้สคริปต์ predict.sh
./predict.sh your_image.jpg --efficientnetv2 --model_path efficientnet_outputs/fine_tuned_model_acc.pth
```

หากคุณไม่ระบุ `--model_path` ในคำสั่ง โปรแกรมจะใช้ไฟล์โมเดลที่กำหนดเป็นค่าเริ่มต้นในโค้ด ซึ่งได้ตั้งค่าไว้ให้ใช้ `fine_tuned_model_acc.pth` ของแต่ละโมเดลอยู่แล้ว

## ข้อแนะนำเพิ่มเติม

1. **การเปรียบเทียบประสิทธิภาพ**: คุณสามารถทดสอบและเปรียบเทียบประสิทธิภาพของโมเดลจากไฟล์ที่แตกต่างกันได้:

```bash
./test.sh --efficientnetv2 --model_path efficientnet_outputs/fine_tuned_model_acc.pth
./test.sh --efficientnetv2 --model_path efficientnet_outputs/best_model_acc.pth
```

2. **การใช้ Ensemble**: หากต้องการความแม่นยำสูงสุด อาจใช้วิธี ensemble โดยนำผลการทำนายจากหลายโมเดลมารวมกัน:

```bash
./predict.sh your_image.jpg --ensemble
```

3. **การแก้ไขค่าเริ่มต้น**: หากต้องการเปลี่ยนไฟล์โมเดลที่ใช้เป็นค่าเริ่มต้น สามารถแก้ไขในไฟล์ `predict_image.py` ในส่วนของ `default_model_paths`:

```python
default_model_paths = {
    'efficientnetv2': 'efficientnet_outputs/fine_tuned_model_acc.pth',
    # แก้ไขพาธอื่นๆ ตามต้องการ
}
```

โดยสรุป ผมแนะนำให้ใช้ไฟล์ `fine_tuned_model_acc.pth` สำหรับการทำนายในกรณีทั่วไป เนื่องจากผ่านการ fine-tuning มาแล้วและให้ความแม่นยำสูงสุด อย่างไรก็ตาม คุณสามารถทดลองใช้ไฟล์อื่นๆ เพื่อเปรียบเทียบผลลัพธ์ที่ได้ก็ได้ครับ